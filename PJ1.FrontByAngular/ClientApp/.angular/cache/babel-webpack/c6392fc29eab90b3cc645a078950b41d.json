{"ast":null,"code":"import _asyncToGenerator from \"D:/Projec_Visual_Studio/2022/My_old_microservises/PJ1.Frontend/PJ1.Frontend/PJ1.FrontByAngular/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { EventEmitter } from '@angular/core';\nimport { UserManager, WebStorageStateStore } from \"oidc-client\";\nimport { environment } from \"../../environments/environment\";\nimport { from } from 'rxjs';\nimport { map } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\"; //import {Headers, RequestOptions, Response} from '@angular/http';\n\n/**\r\n * Настройки клиента аутентификации.\r\n * Полный список параметров конфигурации см. в официальной документации oidc-client-js\r\n * https://github.com/IdentityModel/oidc-client-js/wiki#configuration\r\n *  * @type {{loadUserInfo: boolean, automaticSilentRenew: boolean, userStore:\r\n * WebStorageStateStore, response_type: string, checkSessionInterval: number,\r\n * post_logout_redirect_uri: string, popupWindowTarget: string, staleStateAge: number, client_id:\r\n * string, silentRequestTimeout: number, stateStore: WebStorageStateStore, authority: string,\r\n * scope: string, includeIdTokenInSilentRenew: boolean, mergeClaims: boolean, redirect_uri: string,\r\n * clockSkew: number, silent_redirect_uri: string, accessTokenExpiringNotificationTime: number,\r\n * revokeAccessTokenOnSignout: boolean, filterProtocolClaims: boolean, monitorSession: boolean}}\r\n */\n\nconst settings = {\n  /** URL провайдера OIDC / OAUTH2 */\n  authority: 'https://localhost:10001',\n\n  /** Идентификатор вашего клиента, зарегистрированный в OIDC/OAuth2 */\n  client_id: 'client_js',\n\n  /** Redirect URI вашего клиента приложения при получения ответа\r\n   *  от провайдера OIDC / OAUTH2 */\n  redirect_uri: 'http://localhost:10003/auth.html',\n\n  /** The OIDC/OAuth2 post-logout перенаправление после разлагина URI */\n  post_logout_redirect_uri: 'http://localhost:10003/',\n\n  /** URL -адрес страницы, содержащей код, обрабатывает тихое возобновление */\n  silent_redirect_uri: 'http://localhost:10003/silent-renew.html',\n\n  /** Тип ответа требуемый из поставщика OIDC / OAUTH2 (default: 'id_token') */\n  response_type: 'code',\n\n  /** The scope Запрашивается от провайдера OIDC / OAUTH2 (default: 'openid') */\n  scope: 'openid profile SwaggerAPI',\n\n  /** Объект хранения, используемый для сохранения пользователя для пользователя\r\n   *  в данный момент аутентифицированного пользователя (default: session storage) */\n  userStore: new WebStorageStateStore({\n    store: window.localStorage\n  }),\n\n  /** Флаг, чтобы указать, должна ли быть автоматическая попытка возобновить токен\r\n   *  доступа до его истечения (по умолчанию: false) */\n  automaticSilentRenew: true,\n\n  /**Количество секунд до того, как токен доступа истекает, чтобы поднять\r\n   * событие accessTokenExpiring (по умолчанию: 60) */\n  accessTokenExpiringNotificationTime: 30,\n\n  /** Количество миллисекунд, чтобы ждать молчаливого обновления, чтобы вернуться\r\n   *  до того, как предположить, что он не удался или истечет (по умолчанию: 10000) */\n  silentRequestTimeout: 10000,\n\n  /** следует ли удалять утверждения протокола OIDC из файлов profile. (по умолчанию: true) */\n  filterProtocolClaims: true,\n\n  /** флаг для управления загрузкой дополнительных идентификационных данных\r\n   *  из конечной точки сведений о пользователе для заполнения файла profile.\r\n   *  (по умолчанию: true) */\n  loadUserInfo: true // --- Дополнительные настройки не входившие в шаблон ---------------------------------------\n  // ------------------------------------------------------------------------------------------\n\n  /** URL для страницы, содержащей вызов для SigninPopupCallback для обработки\r\n   *  обратного вызова от OIDC / OAUTH2 */\n  //popup_redirect_uri: \"\",\n\n  /** Параметр функций в Window.Open для окна всплывающего окна.\r\n   *  default: 'location=no,toolbar=no,width=500,height=500,left=100,top=100' */\n  //popupWindowFeatures: \"\",\n\n  /** target параметр window.open для всплывающего окна входа. (default: '_blank') */\n  //popupWindowTarget: \"_blank\",\n\n  /** флаг для управления id_token включением, как id_token_hint в автоматических вызовах\r\n   *  обновления. (default: true) */\n  //includeIdTokenInSilentRenew: true,\n\n  /** вызовет события, когда пользователь выполнил выход из OP. (default: true) */\n  //monitorSession: true,\n\n  /** интервал в миллисекундах для проверки сеанса пользователя (2 секунды) (default: 2000) */\n  //checkSessionInterval: 2000,\n\n  /** вызовет конечную точку отзыва при выходе из системы, если для\r\n   *  пользователя имеется токен доступа. (default: false) */\n  //revokeAccessTokenOnSignout: false,\n\n  /** The OIDC/OAuth2 post-logout  URI перенаправления когда используешь popup */\n  //popup_post_logout_redirect_uri: \"\",\n\n  /** число (в секундах), указывающее возраст записей состояния в хранилище\r\n   * для запросов на авторизацию, которые считаются брошенными и, следовательно,\r\n   * могут быть очищены. (default: 300) */\n  //staleStateAge: 300,\n\n  /** Окно времени (в секундах), позволяющее текущему времени отклоняться\r\n   *  при проверке значений id_token iat, nbf, и exp. (default: 300) */\n  //clockSkew: 300,\n\n  /**  (default: local storage) Объект хранилища, используемый для сохранения состояния\r\n   *  взаимодействия. Например userStore: new WebStorageStateStore({ store:\r\n   *  window.localStorage })*/\n  //stateStore: new WebStorageStateStore({store: window.localStorage}),\n\n  /** (по умолчанию: false) указывает, объединяются ли объекты, возвращенные\r\n   *  из конечной точки информации о пользователе в качестве утверждений\r\n   *  (например address, ), с утверждениями из токена id как единый объект.\r\n   *  В противном случае они добавляются в массив как отдельные\r\n   *  объекты для типа утверждения.*/\n  //mergeClaims: false\n\n};\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    /**\r\n     * Менеджер пользователя\r\n     */\n\n    this.userManager = new UserManager(settings);\n    /**\r\n     * Событие загрузки пользователя\r\n     */\n\n    this.userLoadedEvent = new EventEmitter();\n    /**\r\n     * Флаг входа в систему\r\n     */\n\n    this.loggedIn = false;\n    this.userManager.getUser().then(user => {\n      if (user) {\n        this.loggedIn = true;\n        this.currentUser = user;\n        this.userLoadedEvent.emit(user);\n      } else {\n        this.loggedIn = false;\n      }\n    }).catch(err => {\n      this.loggedIn = false;\n    });\n    this.userManager.events.addUserLoaded(user => {\n      this.currentUser = user;\n      this.loggedIn = !(user === undefined);\n\n      if (!environment.production) {\n        console.log('authService addUserLoaded', user);\n      }\n    });\n    this.userManager.events.addUserUnloaded(() => {\n      if (!environment.production) {\n        console.log('user unloaded');\n      }\n\n      this.loggedIn = false;\n    });\n  }\n  /**\r\n   * Событие сигнализирующее загрузку пользователя\r\n   */\n\n\n  isLoggedInObs() {\n    return from(this.userManager.getUser()).pipe(map(user => {\n      if (user) {\n        return true;\n      } else {\n        return false;\n      }\n    }));\n  }\n  /**\r\n   * Очистить состояние\r\n   */\n\n\n  clearState() {\n    this.userManager.clearStaleState().then(function () {\n      console.log('clearStateState success');\n    }).catch(function (e) {\n      console.log('clearStateState error', e.message);\n    });\n  }\n  /**\r\n   * Получение пользователя\r\n   */\n\n\n  getUser() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this.userManager.getUser().then(user => {\n        _this.currentUser = user;\n        console.log('got user', user);\n\n        _this.userLoadedEvent.emit(user);\n      }).catch(function (err) {\n        console.log(err);\n      });\n    })();\n  }\n  /**\r\n   * Удаление пользователя\r\n   */\n\n\n  removeUser() {\n    this.userManager.removeUser().then(() => {\n      this.userLoadedEvent.emit(null);\n      console.log('user removed');\n    }).catch(function (err) {\n      console.log(err);\n    });\n  }\n  /**\r\n   * Сделать вход Sign In\r\n   */\n\n\n  startSigninMainWindow() {\n    this.userManager.signinRedirect({\n      data: 'some data'\n    }).then(function () {\n      console.log('signinRedirect done');\n      window.alert('signinRedirect done');\n    }).catch(function (err) {\n      console.log(err);\n      window.alert(err.toString());\n    });\n  }\n  /**\r\n   * Ответ процесса от конечной точки авторизации.\r\n   */\n\n\n  endSigninMainWindow() {\n    this.userManager.signinRedirectCallback().then(user => {\n      window.alert(`signed in ${user}`);\n      console.log('signed in', user);\n    }).catch(function (err) {\n      window.alert(err.toString());\n      console.log(err);\n    });\n  }\n  /** Разлогиниться  Sign Out */\n\n\n  startSignoutMainWindow() {\n    this.userManager.getUser().then(user => {\n      return this.userManager.signoutRedirect({\n        id_token_hint: user === null || user === void 0 ? void 0 : user.id_token\n      }).then(resp => {\n        window.alert(`signed in ${resp}`);\n        console.log('signed out', resp);\n        setTimeout(() => {\n          window.alert('testing to see if fired...');\n          console.log('testing to see if fired...');\n        }, 5000);\n      }).catch(function (err) {\n        window.alert(err.toString());\n        console.log(err);\n      });\n    });\n  }\n\n  endSignoutMainWindow() {\n    this.userManager.signoutRedirectCallback().then(resp => {\n      console.log('signed out', resp);\n    }).catch(function (err) {\n      console.log(err);\n    });\n  }\n\n  /**\r\n   * Пример того, как вы можете сделать запрос авторизации с использованием angular методов HTTP.\r\n   * @param options if options are not supplied the default content type is application/json\r\n   */\n  AuthGet(url, options) {\n    // if (options) {\n    //     options = this._setRequestOptions(options);\n    // } else {\n    //     options = this._setRequestOptions();\n    // }\n    return this.http.get(url, options);\n  }\n  /**\r\n   * @param options if options are not supplied the default content type is application/json\r\n   */\n\n\n  AuthPut(url, data, options) {\n    let body = JSON.stringify(data); // if (options) {\n    //     options = this._setRequestOptions(options);\n    // } else {\n    //     options = this._setRequestOptions();\n    // }\n\n    return this.http.put(url, body, options);\n  }\n  /**\r\n   * @param options if options are not supplied the default content type is application/json\r\n   */\n\n\n  AuthDelete(url, options) {\n    // if (options) {\n    //     options = this._setRequestOptions(options);\n    // } else {\n    //     options = this._setRequestOptions();\n    // }\n    return this.http.delete(url, options);\n  }\n  /**\r\n   * @param options if options are not supplied the default content type is application/json\r\n   */\n\n\n  AuthPost(url, data, options) {\n    let body = JSON.stringify(data); // if (options) {\n    //     options = this._setRequestOptions(options);\n    // } else {\n    //     options = this._setRequestOptions();\n    // }\n\n    return this.http.post(url, body, options);\n  }\n\n}\n\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["D:/Projec_Visual_Studio/2022/My_old_microservises/PJ1.Frontend/PJ1.Frontend/PJ1.FrontByAngular/ClientApp/src/app/services/auth.service.ts"],"names":["EventEmitter","UserManager","WebStorageStateStore","environment","from","map","i0","i1","settings","authority","client_id","redirect_uri","post_logout_redirect_uri","silent_redirect_uri","response_type","scope","userStore","store","window","localStorage","automaticSilentRenew","accessTokenExpiringNotificationTime","silentRequestTimeout","filterProtocolClaims","loadUserInfo","AuthService","constructor","http","userManager","userLoadedEvent","loggedIn","getUser","then","user","currentUser","emit","catch","err","events","addUserLoaded","undefined","production","console","log","addUserUnloaded","isLoggedInObs","pipe","clearState","clearStaleState","e","message","removeUser","startSigninMainWindow","signinRedirect","data","alert","toString","endSigninMainWindow","signinRedirectCallback","startSignoutMainWindow","signoutRedirect","id_token_hint","id_token","resp","setTimeout","endSignoutMainWindow","signoutRedirectCallback","AuthGet","url","options","get","AuthPut","body","JSON","stringify","put","AuthDelete","delete","AuthPost","post","ɵfac","AuthService_Factory","t","ɵɵinject","HttpClient","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":"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","sourcesContent":["import { EventEmitter } from '@angular/core';\r\nimport { UserManager, WebStorageStateStore } from \"oidc-client\";\r\nimport { environment } from \"../../environments/environment\";\r\nimport { from } from 'rxjs';\r\nimport { map } from \"rxjs/operators\";\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/common/http\";\r\n//import {Headers, RequestOptions, Response} from '@angular/http';\r\n/**\r\n * Настройки клиента аутентификации.\r\n * Полный список параметров конфигурации см. в официальной документации oidc-client-js\r\n * https://github.com/IdentityModel/oidc-client-js/wiki#configuration\r\n *  * @type {{loadUserInfo: boolean, automaticSilentRenew: boolean, userStore:\r\n * WebStorageStateStore, response_type: string, checkSessionInterval: number,\r\n * post_logout_redirect_uri: string, popupWindowTarget: string, staleStateAge: number, client_id:\r\n * string, silentRequestTimeout: number, stateStore: WebStorageStateStore, authority: string,\r\n * scope: string, includeIdTokenInSilentRenew: boolean, mergeClaims: boolean, redirect_uri: string,\r\n * clockSkew: number, silent_redirect_uri: string, accessTokenExpiringNotificationTime: number,\r\n * revokeAccessTokenOnSignout: boolean, filterProtocolClaims: boolean, monitorSession: boolean}}\r\n */\r\nconst settings = {\r\n    /** URL провайдера OIDC / OAUTH2 */\r\n    authority: 'https://localhost:10001',\r\n    /** Идентификатор вашего клиента, зарегистрированный в OIDC/OAuth2 */\r\n    client_id: 'client_js',\r\n    /** Redirect URI вашего клиента приложения при получения ответа\r\n     *  от провайдера OIDC / OAUTH2 */\r\n    redirect_uri: 'http://localhost:10003/auth.html',\r\n    /** The OIDC/OAuth2 post-logout перенаправление после разлагина URI */\r\n    post_logout_redirect_uri: 'http://localhost:10003/',\r\n    /** URL -адрес страницы, содержащей код, обрабатывает тихое возобновление */\r\n    silent_redirect_uri: 'http://localhost:10003/silent-renew.html',\r\n    /** Тип ответа требуемый из поставщика OIDC / OAUTH2 (default: 'id_token') */\r\n    response_type: 'code',\r\n    /** The scope Запрашивается от провайдера OIDC / OAUTH2 (default: 'openid') */\r\n    scope: 'openid profile SwaggerAPI',\r\n    /** Объект хранения, используемый для сохранения пользователя для пользователя\r\n     *  в данный момент аутентифицированного пользователя (default: session storage) */\r\n    userStore: new WebStorageStateStore({ store: window.localStorage }),\r\n    /** Флаг, чтобы указать, должна ли быть автоматическая попытка возобновить токен\r\n     *  доступа до его истечения (по умолчанию: false) */\r\n    automaticSilentRenew: true,\r\n    /**Количество секунд до того, как токен доступа истекает, чтобы поднять\r\n     * событие accessTokenExpiring (по умолчанию: 60) */\r\n    accessTokenExpiringNotificationTime: 30,\r\n    /** Количество миллисекунд, чтобы ждать молчаливого обновления, чтобы вернуться\r\n     *  до того, как предположить, что он не удался или истечет (по умолчанию: 10000) */\r\n    silentRequestTimeout: 10000,\r\n    /** следует ли удалять утверждения протокола OIDC из файлов profile. (по умолчанию: true) */\r\n    filterProtocolClaims: true,\r\n    /** флаг для управления загрузкой дополнительных идентификационных данных\r\n     *  из конечной точки сведений о пользователе для заполнения файла profile.\r\n     *  (по умолчанию: true) */\r\n    loadUserInfo: true,\r\n    // --- Дополнительные настройки не входившие в шаблон ---------------------------------------\r\n    // ------------------------------------------------------------------------------------------\r\n    /** URL для страницы, содержащей вызов для SigninPopupCallback для обработки\r\n     *  обратного вызова от OIDC / OAUTH2 */\r\n    //popup_redirect_uri: \"\",\r\n    /** Параметр функций в Window.Open для окна всплывающего окна.\r\n     *  default: 'location=no,toolbar=no,width=500,height=500,left=100,top=100' */\r\n    //popupWindowFeatures: \"\",\r\n    /** target параметр window.open для всплывающего окна входа. (default: '_blank') */\r\n    //popupWindowTarget: \"_blank\",\r\n    /** флаг для управления id_token включением, как id_token_hint в автоматических вызовах\r\n     *  обновления. (default: true) */\r\n    //includeIdTokenInSilentRenew: true,\r\n    /** вызовет события, когда пользователь выполнил выход из OP. (default: true) */\r\n    //monitorSession: true,\r\n    /** интервал в миллисекундах для проверки сеанса пользователя (2 секунды) (default: 2000) */\r\n    //checkSessionInterval: 2000,\r\n    /** вызовет конечную точку отзыва при выходе из системы, если для\r\n     *  пользователя имеется токен доступа. (default: false) */\r\n    //revokeAccessTokenOnSignout: false,\r\n    /** The OIDC/OAuth2 post-logout  URI перенаправления когда используешь popup */\r\n    //popup_post_logout_redirect_uri: \"\",\r\n    /** число (в секундах), указывающее возраст записей состояния в хранилище\r\n     * для запросов на авторизацию, которые считаются брошенными и, следовательно,\r\n     * могут быть очищены. (default: 300) */\r\n    //staleStateAge: 300,\r\n    /** Окно времени (в секундах), позволяющее текущему времени отклоняться\r\n     *  при проверке значений id_token iat, nbf, и exp. (default: 300) */\r\n    //clockSkew: 300,\r\n    /**  (default: local storage) Объект хранилища, используемый для сохранения состояния\r\n     *  взаимодействия. Например userStore: new WebStorageStateStore({ store:\r\n     *  window.localStorage })*/\r\n    //stateStore: new WebStorageStateStore({store: window.localStorage}),\r\n    /** (по умолчанию: false) указывает, объединяются ли объекты, возвращенные\r\n     *  из конечной точки информации о пользователе в качестве утверждений\r\n     *  (например address, ), с утверждениями из токена id как единый объект.\r\n     *  В противном случае они добавляются в массив как отдельные\r\n     *  объекты для типа утверждения.*/\r\n    //mergeClaims: false\r\n};\r\nexport class AuthService {\r\n    constructor(http) {\r\n        this.http = http;\r\n        /**\r\n         * Менеджер пользователя\r\n         */\r\n        this.userManager = new UserManager(settings);\r\n        /**\r\n         * Событие загрузки пользователя\r\n         */\r\n        this.userLoadedEvent = new EventEmitter();\r\n        /**\r\n         * Флаг входа в систему\r\n         */\r\n        this.loggedIn = false;\r\n        this.userManager.getUser()\r\n            .then((user) => {\r\n            if (user) {\r\n                this.loggedIn = true;\r\n                this.currentUser = user;\r\n                this.userLoadedEvent.emit(user);\r\n            }\r\n            else {\r\n                this.loggedIn = false;\r\n            }\r\n        })\r\n            .catch((err) => {\r\n            this.loggedIn = false;\r\n        });\r\n        this.userManager.events.addUserLoaded((user) => {\r\n            this.currentUser = user;\r\n            this.loggedIn = !(user === undefined);\r\n            if (!environment.production) {\r\n                console.log('authService addUserLoaded', user);\r\n            }\r\n        });\r\n        this.userManager.events.addUserUnloaded(() => {\r\n            if (!environment.production) {\r\n                console.log('user unloaded');\r\n            }\r\n            this.loggedIn = false;\r\n        });\r\n    }\r\n    /**\r\n     * Событие сигнализирующее загрузку пользователя\r\n     */\r\n    isLoggedInObs() {\r\n        return from(this.userManager.getUser()).pipe(map((user) => {\r\n            if (user) {\r\n                return true;\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        }));\r\n    }\r\n    /**\r\n     * Очистить состояние\r\n     */\r\n    clearState() {\r\n        this.userManager.clearStaleState().then(function () {\r\n            console.log('clearStateState success');\r\n        }).catch(function (e) {\r\n            console.log('clearStateState error', e.message);\r\n        });\r\n    }\r\n    /**\r\n     * Получение пользователя\r\n     */\r\n    async getUser() {\r\n        await this.userManager.getUser().then((user) => {\r\n            this.currentUser = user;\r\n            console.log('got user', user);\r\n            this.userLoadedEvent.emit(user);\r\n        }).catch(function (err) {\r\n            console.log(err);\r\n        });\r\n    }\r\n    /**\r\n     * Удаление пользователя\r\n     */\r\n    removeUser() {\r\n        this.userManager.removeUser().then(() => {\r\n            this.userLoadedEvent.emit(null);\r\n            console.log('user removed');\r\n        }).catch(function (err) {\r\n            console.log(err);\r\n        });\r\n    }\r\n    /**\r\n     * Сделать вход Sign In\r\n     */\r\n    startSigninMainWindow() {\r\n        this.userManager.signinRedirect({ data: 'some data' })\r\n            .then(function () {\r\n            console.log('signinRedirect done');\r\n            window.alert('signinRedirect done');\r\n        }).catch(function (err) {\r\n            console.log(err);\r\n            window.alert(err.toString());\r\n        });\r\n    }\r\n    /**\r\n     * Ответ процесса от конечной точки авторизации.\r\n     */\r\n    endSigninMainWindow() {\r\n        this.userManager.signinRedirectCallback().then(user => {\r\n            window.alert(`signed in ${user}`);\r\n            console.log('signed in', user);\r\n        }).catch(function (err) {\r\n            window.alert(err.toString());\r\n            console.log(err);\r\n        });\r\n    }\r\n    /** Разлогиниться  Sign Out */\r\n    startSignoutMainWindow() {\r\n        this.userManager.getUser().then(user => {\r\n            return this.userManager\r\n                .signoutRedirect({ id_token_hint: user === null || user === void 0 ? void 0 : user.id_token })\r\n                .then(resp => {\r\n                window.alert(`signed in ${resp}`);\r\n                console.log('signed out', resp);\r\n                setTimeout(() => {\r\n                    window.alert('testing to see if fired...');\r\n                    console.log('testing to see if fired...');\r\n                }, 5000);\r\n            }).catch(function (err) {\r\n                window.alert(err.toString());\r\n                console.log(err);\r\n            });\r\n        });\r\n    }\r\n    ;\r\n    endSignoutMainWindow() {\r\n        this.userManager.signoutRedirectCallback().then(resp => {\r\n            console.log('signed out', resp);\r\n        }).catch(function (err) {\r\n            console.log(err);\r\n        });\r\n    }\r\n    ;\r\n    /**\r\n     * Пример того, как вы можете сделать запрос авторизации с использованием angular методов HTTP.\r\n     * @param options if options are not supplied the default content type is application/json\r\n     */\r\n    AuthGet(url, options) {\r\n        // if (options) {\r\n        //     options = this._setRequestOptions(options);\r\n        // } else {\r\n        //     options = this._setRequestOptions();\r\n        // }\r\n        return this.http.get(url, options);\r\n    }\r\n    /**\r\n     * @param options if options are not supplied the default content type is application/json\r\n     */\r\n    AuthPut(url, data, options) {\r\n        let body = JSON.stringify(data);\r\n        // if (options) {\r\n        //     options = this._setRequestOptions(options);\r\n        // } else {\r\n        //     options = this._setRequestOptions();\r\n        // }\r\n        return this.http.put(url, body, options);\r\n    }\r\n    /**\r\n     * @param options if options are not supplied the default content type is application/json\r\n     */\r\n    AuthDelete(url, options) {\r\n        // if (options) {\r\n        //     options = this._setRequestOptions(options);\r\n        // } else {\r\n        //     options = this._setRequestOptions();\r\n        // }\r\n        return this.http.delete(url, options);\r\n    }\r\n    /**\r\n     * @param options if options are not supplied the default content type is application/json\r\n     */\r\n    AuthPost(url, data, options) {\r\n        let body = JSON.stringify(data);\r\n        // if (options) {\r\n        //     options = this._setRequestOptions(options);\r\n        // } else {\r\n        //     options = this._setRequestOptions();\r\n        // }\r\n        return this.http.post(url, body, options);\r\n    }\r\n}\r\nAuthService.ɵfac = function AuthService_Factory(t) { return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient)); };\r\nAuthService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: AuthService, factory: AuthService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}